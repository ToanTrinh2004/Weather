Index: src/WeatherPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.json.simple.JSONObject;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class WeatherPanel extends JPanel {\r\n    private JLabel nameLabel;\r\n    private JLabel temperatureLabel;\r\n    private JLabel weatherConditionLabel;\r\n    private JLabel humidityLabel;\r\n    private JLabel windSpeedLabel;\r\n    private JLabel timeLabel;\r\n    private JLabel statusLabel;\r\n    private JLabel pressureLabel;\r\n    private JButton refreshButton;\r\n\r\n    // Constructor for the WeatherPanel\r\n    public WeatherPanel(double latitude, double longitude, String name) {\r\n        setLayout(new GridLayout(8, 2, 10, 1)); // 8 rows, 1 column, spacing of 10\r\n        setBackground(Color.cyan);\r\n        // Initialize labels for weather information\r\n        nameLabel = new JLabel(\"Country: \" + name);\r\n        temperatureLabel = new JLabel(\"Temperature: \");\r\n        weatherConditionLabel = new JLabel(\"Weather Condition: \");\r\n        humidityLabel = new JLabel(\"Humidity: \");\r\n        windSpeedLabel = new JLabel(\"Wind Speed: \");\r\n        timeLabel = new JLabel(\"Time: \");\r\n        statusLabel = new JLabel(\"Day/Night: \");\r\n        pressureLabel = new JLabel(\"Pressure: \");\r\n\r\n        // Initialize refresh button\r\n        refreshButton = new JButton(\"Refresh Data\");\r\n\r\n        // Add labels and button to the panel\r\n        add(nameLabel);\r\n        add(timeLabel);\r\n        add(statusLabel);\r\n        add(temperatureLabel);\r\n        add(weatherConditionLabel);\r\n        add(humidityLabel);\r\n        add(windSpeedLabel);\r\n        add(pressureLabel);\r\n        add(refreshButton);\r\n\r\n        // Set action to fetch and display weather data on button click\r\n        refreshButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                fetchAndDisplayWeatherData(latitude, longitude, name);\r\n            }\r\n        });\r\n\r\n        // Initial load of weather data\r\n        fetchAndDisplayWeatherData(latitude, longitude, name);\r\n    }\r\n\r\n    // Method to fetch and display weather data\r\n    private void fetchAndDisplayWeatherData(double latitude, double longitude, String name) {\r\n        JSONObject weatherData = WeatherApi.getWeatherData(latitude, longitude);\r\n\r\n        if (weatherData != null) {\r\n            // Update labels with fetched weather data\r\n            nameLabel.setText(\"Country: \" + name);\r\n            timeLabel.setText(\"Time: \" + weatherData.get(\"time\"));\r\n            statusLabel.setText(\"Day/Night: \" + ((Boolean) weatherData.get(\"status\") ? \"Day\" : \"Night\"));\r\n            temperatureLabel.setText(\"Temperature: \" + weatherData.get(\"temperature\") + \"°C\");\r\n            weatherConditionLabel.setText(\"Weather Condition: \" + weatherData.get(\"weather_condition\"));\r\n            humidityLabel.setText(\"Humidity: \" + weatherData.get(\"humidity\") + \"%\");\r\n            windSpeedLabel.setText(\"Wind Speed: \" + weatherData.get(\"windspeed\") + \" km/h\");\r\n            pressureLabel.setText(\"Pressure: \" + weatherData.get(\"pressure\") + \" hPa\");\r\n        } else {\r\n            // Display error message if data couldn't be fetched\r\n            timeLabel.setText(\"Time: Data not available\");\r\n            statusLabel.setText(\"Day/Night: Data not available\");\r\n            temperatureLabel.setText(\"Temperature: Data not available\");\r\n            weatherConditionLabel.setText(\"Weather Condition: Data not available\");\r\n            humidityLabel.setText(\"Humidity: Data not available\");\r\n            windSpeedLabel.setText(\"Wind Speed: Data not available\");\r\n            pressureLabel.setText(\"Pressure: Data not available\");\r\n        }\r\n    }\r\n\r\n    // Method to update the WeatherPanel with new location data\r\n    public void updateWeatherPanel(double newLatitude, double newLongitude, String newName) {\r\n        nameLabel.setText(\"Country: \" + newName);\r\n        fetchAndDisplayWeatherData(newLatitude, newLongitude, newName);\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/WeatherPanel.java b/src/WeatherPanel.java
--- a/src/WeatherPanel.java	
+++ b/src/WeatherPanel.java	
@@ -1,8 +1,10 @@
 import org.json.simple.JSONObject;
 import javax.swing.*;
+import javax.swing.border.EmptyBorder;
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.util.Objects;
 
 public class WeatherPanel extends JPanel {
     private JLabel nameLabel;
@@ -13,11 +15,15 @@
     private JLabel timeLabel;
     private JLabel statusLabel;
     private JLabel pressureLabel;
-    private JButton refreshButton;
+    private JLabel currentLabel;
+    private JLabel weatherIcon;
+    private RoundedPanel currentWeather;
+
+
 
     // Constructor for the WeatherPanel
     public WeatherPanel(double latitude, double longitude, String name) {
-        setLayout(new GridLayout(8, 2, 10, 1)); // 8 rows, 1 column, spacing of 10
+        setLayout(null); // 8 rows, 1 column, spacing of 10
         setBackground(Color.cyan);
         // Initialize labels for weather information
         nameLabel = new JLabel("Country: " + name);
@@ -25,31 +31,42 @@
         weatherConditionLabel = new JLabel("Weather Condition: ");
         humidityLabel = new JLabel("Humidity: ");
         windSpeedLabel = new JLabel("Wind Speed: ");
-        timeLabel = new JLabel("Time: ");
+        timeLabel = new JLabel("");
         statusLabel = new JLabel("Day/Night: ");
         pressureLabel = new JLabel("Pressure: ");
+        currentLabel = new JLabel("Current weather");
+        weatherIcon = new JLabel();
 
-        // Initialize refresh button
-        refreshButton = new JButton("Refresh Data");
-
+        // current panel
+        currentWeather  = new RoundedPanel(20,Color.white);
+        currentWeather.setBackground(Color.white);
+        currentWeather.setBounds(100,70,300,300);//set position for panel
+        currentWeather.setLayout(null);// set layout null
+        currentWeather.setBorder(new EmptyBorder(20, 20, 20, 20)); // set padding 20px
         // Add labels and button to the panel
-        add(nameLabel);
-        add(timeLabel);
-        add(statusLabel);
-        add(temperatureLabel);
-        add(weatherConditionLabel);
-        add(humidityLabel);
-        add(windSpeedLabel);
-        add(pressureLabel);
-        add(refreshButton);
+        currentWeather.add(currentLabel);
+        currentLabel.setFont(new Font("Default", Font.BOLD, 15));
+        currentLabel.setBounds(10,10,200,15);
+        currentWeather.add(timeLabel);
+        timeLabel.setFont(new Font("Default", Font.PLAIN, 12));
+        timeLabel.setForeground(Color.GRAY);
+        timeLabel.setBounds(10,30,200,12);
+        weatherIcon.setBounds(10,65,80,80);
+        temperatureLabel.setBounds(100,72,200,40);
+        temperatureLabel.setFont(new Font("Default",Font.BOLD,40));
+        weatherConditionLabel.setBounds(100,120,100,20);
+        weatherConditionLabel.setFont(new Font("Default",Font.PLAIN,20));
+        currentWeather.add(weatherIcon);
+        currentWeather.add(statusLabel);
+        currentWeather.add(temperatureLabel);
+        currentWeather.add(weatherConditionLabel);
+        currentWeather.add(humidityLabel);
+        currentWeather.add(windSpeedLabel);
+        currentWeather.add(pressureLabel);
+        add(currentWeather);
 
         // Set action to fetch and display weather data on button click
-        refreshButton.addActionListener(new ActionListener() {
-            @Override
-            public void actionPerformed(ActionEvent e) {
-                fetchAndDisplayWeatherData(latitude, longitude, name);
-            }
-        });
+
 
         // Initial load of weather data
         fetchAndDisplayWeatherData(latitude, longitude, name);
@@ -62,10 +79,15 @@
         if (weatherData != null) {
             // Update labels with fetched weather data
             nameLabel.setText("Country: " + name);
-            timeLabel.setText("Time: " + weatherData.get("time"));
+            String fullTime = (String) weatherData.get("time"); // Get the time string from the JSON
+            String time = fullTime.substring(11); // Extract the time part
+            timeLabel.setText("" + time); // Set the label text
             statusLabel.setText("Day/Night: " + ((Boolean) weatherData.get("status") ? "Day" : "Night"));
-            temperatureLabel.setText("Temperature: " + weatherData.get("temperature") + "°C");
-            weatherConditionLabel.setText("Weather Condition: " + weatherData.get("weather_condition"));
+            temperatureLabel.setText("" + weatherData.get("temperature"));
+            int weatherCode = (int) weatherData.get("weather_condition");
+            weatherConditionLabel.setText(getWeatherDescription(weatherCode));
+            weatherIcon.setIcon(new ImageIcon(Objects.requireNonNull(WeatherPanel.class.getResource("/Assets/cloudy.png"))));
+
             humidityLabel.setText("Humidity: " + weatherData.get("humidity") + "%");
             windSpeedLabel.setText("Wind Speed: " + weatherData.get("windspeed") + " km/h");
             pressureLabel.setText("Pressure: " + weatherData.get("pressure") + " hPa");
@@ -86,4 +108,66 @@
         nameLabel.setText("Country: " + newName);
         fetchAndDisplayWeatherData(newLatitude, newLongitude, newName);
     }
+    public static String getWeatherDescription(int code) {
+        switch (code) {
+            case 0:
+                return "Clear sky";
+            case 1:
+                return "Mainly clear";
+            case 2:
+                return "Partly cloudy";
+            case 3:
+                return "Overcast";
+            case 45:
+                return "Fog";
+            case 48:
+                return "Depositing rime fog";
+            case 51:
+                return "Drizzle: Light intensity";
+            case 53:
+                return "Drizzle: Moderate intensity";
+            case 55:
+                return "Drizzle: Dense intensity";
+            case 56:
+                return "Freezing drizzle: Light intensity";
+            case 57:
+                return "Freezing drizzle: Dense intensity";
+            case 61:
+                return "Rain: Slight intensity";
+            case 63:
+                return "Rain: Moderate intensity";
+            case 65:
+                return "Rain: Heavy intensity";
+            case 66:
+                return "Freezing rain: Light intensity";
+            case 67:
+                return "Freezing rain: Heavy intensity";
+            case 71:
+                return "Snow fall: Slight intensity";
+            case 73:
+                return "Snow fall: Moderate intensity";
+            case 75:
+                return "Snow fall: Heavy intensity";
+            case 77:
+                return "Snow grains";
+            case 80:
+                return "Rain showers: Slight intensity";
+            case 81:
+                return "Rain showers: Moderate intensity";
+            case 82:
+                return "Rain showers: Violent intensity";
+            case 85:
+                return "Snow showers: Slight intensity";
+            case 86:
+                return "Snow showers: Heavy intensity";
+            case 95:
+                return "Thunderstorm: Slight or moderate";
+            case 96:
+                return "Thunderstorm with slight hail";
+            case 99:
+                return "Thunderstorm with heavy hail";
+            default:
+                return "Unknown weather condition"; // Default case for unknown codes
+        }
+    }
 }
Index: src/customeLabel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\n\r\npublic class customeLabel extends JLabel {\r\n}\r\n
===================================================================
diff --git a/src/customeLabel.java b/src/customeLabel.java
--- a/src/customeLabel.java	
+++ b/src/customeLabel.java	
@@ -1,4 +1,5 @@
 import javax.swing.*;
 
 public class customeLabel extends JLabel {
+
 }
